#include <string>
#include <cstring>
#include <vector>
#include <unordered_map>

using namespace std;

typedef struct _st_song
{
    int id;
    int plays;
    
    _st_song() : id(-1), plays(0) {}
    _st_song(int _id, int _plays) : id(_id), plays(_plays) {}
} SONG;

typedef struct _st_album
{
    int total_plays;
    SONG top2_song[2];
    
    _st_album() :total_plays(-1) {}
} ALBUM;

template <typename T>
inline void swap_thing(T &dest, T &src)
{
    T temp = dest;
    dest = src;
    src = temp;
}

vector<int> solution(vector<string> genres, vector<int> plays) {
    vector<int> answer;
    unordered_map<string, ALBUM> map_albums;
    
    for (int i = 0; i < genres.size(); ++i)
    {
        ALBUM *album = &map_albums[genres[i]];
        SONG song(i, plays[i]);
        
        album->total_plays += song.plays;
        
        if (album->top2_song[0].plays < song.plays || album->top2_song[0].id == -1)
            swap_thing<SONG>(album->top2_song[0], song);
        
      if (album->top2_song[1].plays < song.plays || album->top2_song[1].id == -1)
            album->top2_song[1] = song;
    }
    
    int idx = 0;
    ALBUM *best_album = (ALBUM *)malloc(sizeof(ALBUM) * map_albums.size());
    for (auto iter = map_albums.begin(); iter != map_albums.end(); ++iter)
    {
        memcpy(&best_album[idx], &iter->second, sizeof(ALBUM));
        ++idx;
    }
    
    for (int i = 0; i < map_albums.size(); ++i)
    {
        if ( i + 1 == map_albums.size())
        {
            break;
        }
        
        for (int j = i + 1; j < map_albums.size(); ++j)
        {
            if (best_album[i].total_plays < best_album[j].total_plays)
            {
                swap_thing(best_album[i], best_album[j]);
            }
        }
    }
    
    for (int i = 0; i < map_albums.size(); ++i)
    {
        if (best_album[i].top2_song[0].id != -1)
            answer.push_back(best_album[i].top2_song[0].id);
        
        if (best_album[i].top2_song[1].id != -1)
            answer.push_back(best_album[i].top2_song[1].id);
    }
    
    return answer;
}
